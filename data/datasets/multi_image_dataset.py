import numpy as np
import warnings
import torch
import pickle
from .dataset_new import Dataset
from PIL import Image
import cv2
import os
from torchvision.transforms.functional import to_tensor
from ..transforms import build_transform

from .build import DATASET_REG, build_dataset

@DATASET_REG.register()
class MultiImageDataset(Dataset):
    '''
    A dataset that can return multiple images a time,
    It is useful for Mosaic or Mixup data augmentations
    It returns the image with idx and other images with 
    generated by index_gen. If index_gen is None, then random
    index will be generated 
    '''
    def __init__(self, 
                 dataset_cfg, 
                 transforms=None,
                 ignore_transform_keys=None):
        self._dataset = build_dataset(dataset_cfg)
        if transforms is None:
            transforms = []
        self._transform_types = [t['type'] for t in transforms]
        self._transforms = [build_transform(t) for t in transforms]
        self.update_ignore_transform_keys(ignore_transform_keys)

    def __len__(self):
        return self._dataset.__len__()

    def __getitem__(self, idx):
        inputs, targets = self._dataset[idx]
        for transfrom, transform_type in zip(self._transforms, self._transform_types):
            if self._ignore_transfrom_keys is not None and transform_type in self._ignore_transfrom_keys:
                continue

            if hasattr(transfrom, 'get_index'):
                inds = transfrom.get_index(self)
                extra_imgs = [self._dataset[i] for i in inds]
                inputs['extra_images'] = extra_imgs
            inputs, targets = transfrom(inputs, targets)
            if 'extra_images' in inputs:
                inputs.pop('extra_images')
        return inputs, targets
        

    def update_ignore_transform_keys(self, ignore_transform_keys):
        self._ignore_transfrom_keys = ignore_transform_keys
        if self._ignore_transfrom_keys is not None:
            for k in self._ignore_transfrom_keys:
                if k not in self._transform_types:
                    warnings.warn('The updated key {} is not in existing transforms, maybe you set the wrong name.'.format(k))
